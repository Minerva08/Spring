
// 우편번호 찾기 찾기 화면을 넣을 element
    
function foldDaumPostcode() {
    // iframe을 넣은 element를 안보이게 한다.
    element_wrap.style.display = 'none';
}

function Postcode() {
    // 현재 scroll 위치를 저장해놓는다.
    var currentScroll = Math.max(document.body.scrollTop, document.documentElement.scrollTop);
    new daum.Postcode({
        oncomplete: function(data) {
            // 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

            // 각 주소의 노출 규칙에 따라 주소를 조합한다.
            // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
            var addr = ''; // 주소 변수
            var extraAddr = ''; // 참고항목 변수

            //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
            if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
                addr = data.roadAddress;
            } else { // 사용자가 지번 주소를 선택했을 경우(J)
                addr = data.jibunAddress;
            }

            // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.
            if(data.userSelectedType === 'R'){
                // 법정동명이 있을 경우 추가한다. (법정리는 제외)
                // 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){
                    extraAddr += data.bname;
                }
                // 건물명이 있고, 공동주택일 경우 추가한다.
                if(data.buildingName !== '' && data.apartment === 'Y'){
                    extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                }
                // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
                if(extraAddr !== ''){
                    extraAddr = ' (' + extraAddr + ')';
                }
                
            
            } 

            // 우편번호와 주소 정보를 해당 필드에 넣는다.
            document.getElementById('user_postnum').value = data.zonecode;
            document.getElementById("user_address").value = addr;
            // 커서를 상세주소 필드로 이동한다.
            document.getElementById("user_addressdetail").focus();

            // iframe을 넣은 element를 안보이게 한다.
            // (autoClose:false 기능을 이용한다면, 아래 코드를 제거해야 화면에서 사라지지 않는다.)
            element_wrap.style.display = 'none';

            // 우편번호 찾기 화면이 보이기 이전으로 scroll 위치를 되돌린다.
            document.body.scrollTop = currentScroll;
        },
        // 우편번호 찾기 화면 크기가 조정되었을때 실행할 코드를 작성하는 부분. iframe을 넣은 element의 높이값을 조정한다.
        onresize : function(size) {
            element_wrap.style.height = size.height+'px';
        },
        width : '100%',
        height : '100%'
    }).embed(element_wrap);

    // iframe을 넣은 element를 보이게 한다.
    element_wrap.style.display = 'block';
}

    
function onload_join(event){
	 email.style.border='0'
     email.style.outline='none'

     pw.style.border='0'
     pw.style.outline='none'

     pw_check.style.border='0'
     pw_check.style.outline='none'

     nickname.style.border='0'
     nickname.style.outline='none'

     pnum.style.border='0'
     pnum.style.outline='none' 
         
}


function duplicate_email(event){
	 event.preventDefault()

	    //const userpw = document.querySelector('input[name="userpw"]')

	    if(email.value==''){
	        alert('이메일을 입력해 주세요')
	        user_email.focus()
	        return
	    }
	    
	    let url = cpath+'/email_check?user_email='+email.value
	   
	   
	    const opt={
	        method:'GET'
	    }

	    fetch(url, opt)
	    .then(resp => resp.json())
	    .then(json => {
	        msg_email.innerText = json.msg
	        msg_email.style.color = json.color
	        if(msg_email.style.color=='red'){
		    	email.value=''
		    	return
		    }
	        else{
	        	pw.focus()
	        	count+=1
	        }
	        
	        
	    })
	    
	   
}

function duplicate_nick(event){
	event.preventDefault()
	
    if(nickname.value==''){
        alert('닉네임을 입력해 주세요')
        nickname.focus()
        return
    }
  
    let url = cpath+'/nickname_check?user_nickname='+nickname.value
    console.log(url)
    const opt={
        method:'GET'
    }

    fetch(url, opt)
    .then(resp => resp.json())
    .then(json => {
        console.log(typeof json)
        msg_nick.innerText = json.msg
        msg_nick.style.color=json.color
        if(msg_nick.style.color=='red'){
	    	nickname.value=''
	    	return
	    }
        else{
        	pnum.focus()
        	count+=2
        }
    })

}


function go_join(event){
	if(count==2||count==0){
		alert('이메일 중복 확인을 해주세요')
	}
	else if(count==1){
		alert('닉네임 중복 확인을 해주세요')
	}
}

function go_login(event){
	  if(email.value==''){
         alert('이메일을 입력해 주세요')
         email.focus()
	 }
	 else if(pw.value==''){
		 alert('비밀번호를 입력해 주세요')
         pw.focus()
     }
}


function onload_login(event){
	if (msg != '') {
		alert(msg)
	}
	
     email.style.border='none'
     email.style.outline='none'
     pw.style.border='none'
     pw.style.outline='none'
}



